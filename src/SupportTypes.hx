import typescript.ts.Symbol;
import haxe.macro.Expr;

using StringTools;
using tool.HaxeTools;
using tool.SymbolAccessTools;

@:access(ConverterContext)
class SupportTypes {

	/**
		Haxe doesn't support tuple-types so we generate a support type as required
	**/
	static public function getTupleType(ctx: ConverterContext, elementTypes: Array<ComplexType>): ComplexType {
		if (elementTypes.length == 0) {
			return macro :std.Array<Any>;
		}

		var baseType = HaxeTools.commonType(elementTypes);
		var typePath = {
			pack: ['js', 'lib'],
			name: 'Tuple${elementTypes.length}',
			params: [TPType(baseType)].concat(elementTypes.map(t -> TPType(t)))
		};

		var existingModule = ctx.getGeneratedModule(typePath);

		if (existingModule == null) {
			// generate fields
			var fields = new Array<Field>();

			for (i in 0...elementTypes.length) {
				var name = 'element$i';
				var type = TPath({
					name: 'T$i',
					pack: [],
				});
				var get = 'get_$name';
				var set = 'set_$name';
				var indexExpr = HaxeTools.toIntExpr(i);
				fields = fields.concat((macro class {
					public var $name(get, set): $type;
					inline function $get(): $type return cast this[$indexExpr];
					inline function $set(v: $type): $type return cast this[$indexExpr] = cast v;
				}).fields);
			}

			var abstractType = macro :std.Array<Base>;

			var tupleTypeDefinition: HaxeModule = {
				pack: typePath.pack,
				name: typePath.name,
				kind: TDAbstract(abstractType, [abstractType], [abstractType]),
				params: [{name: 'Base'}].concat([for (i in 0...elementTypes.length) { name: 'T$i', }]),
				fields: fields,
				isExtern: true,
				doc: tool.StringTools.removeIndentation('
					Automatically generated tuple type implementation
					Generated by dts2hx v${Main.dts2hxPackageJson.version}
				').trim(),
				meta: [{name: ':forward', pos: null}, {name: ':forwardStatics', pos: null}],
				pos: null,
				subTypes: [],
				tsSymbol: null,
				tsSymbolAccess: null,
			}

			ctx.saveHaxeModule(tupleTypeDefinition);
		}

		return TPath(typePath);
	}

	static public function getUnionType(ctx: ConverterContext, types: Array<ComplexType>): ComplexType {
		if (types.length == 0) {
			Log.error('getSupportUnionType(): no types provided');
			debug();
			return macro :Any;
		}
		// here we could generate an advanced union type like we do for tuple but let's save that for another day
		// instead, generate an EitherType stack
		function getEitherUnion(types: Array<ComplexType>): ComplexType {
			return if (types.length == 1) {
				types[0];
			} else {
				TPath({
					name: 'EitherType',
					pack: ['haxe', 'extern'],
					params: [TPType(types[0]), TPType(getEitherUnion(types.slice(1)))],
				});
			}
		}

		return getEitherUnion(types);
	}

	static public function getGlobalModuleForFieldSymbol(ctx: ConverterContext, symbol: Symbol, access: SymbolAccess): HaxeModule {
		var typePath = ctx.haxeTypePathMap.getGlobalModuleTypePath(symbol, access);
		var existingModule = ctx.getGeneratedModule({name: typePath.name, pack: typePath.pack});
		if (existingModule != null) {
			return existingModule;
		}
		var hxModule = {
			pack: typePath.pack,
			name: typePath.name,
			fields: [],
			kind: TDClass(null, [], false, false),
			params: [],
			isExtern: true,
			doc: '',
			meta: [SymbolAccess.Global([]).toAccessMetadata()],
			pos: null,
			subTypes: [],
			tsSymbol: symbol,
			tsSymbolAccess: access,
		}
		ctx.saveHaxeModule(hxModule);
		return hxModule;
	}

}