@:jsRequire("three") @valueModuleOnly extern class Three {
	static function warn(?message:Dynamic, optionalParams:haxe.extern.Rest<Dynamic>):Void;
	static function error(?message:Dynamic, optionalParams:haxe.extern.Rest<Dynamic>):Void;
	static function log(?message:Dynamic, optionalParams:haxe.extern.Rest<Dynamic>):Void;
	static var ShaderLib : {
		var basic : three.Shader;
		var lambert : three.Shader;
		var phong : three.Shader;
		var standard : three.Shader;
		var matcap : three.Shader;
		var points : three.Shader;
		var dashed : three.Shader;
		var depth : three.Shader;
		var normal : three.Shader;
		var sprite : three.Shader;
		var background : three.Shader;
		var cube : three.Shader;
		var equirect : three.Shader;
		var distanceRGBA : three.Shader;
		var shadow : three.Shader;
		var physical : three.Shader;
	};
	static var UniformsLib : {
		var common : {
			var diffuse : three.IUniform;
			var opacity : three.IUniform;
			var map : three.IUniform;
			var uvTransform : three.IUniform;
			var alphaMap : three.IUniform;
		};
		var specularmap : {
			var specularMap : three.IUniform;
		};
		var envmap : {
			var envMap : three.IUniform;
			var flipEnvMap : three.IUniform;
			var reflectivity : three.IUniform;
			var refractionRatio : three.IUniform;
			var maxMipLevel : three.IUniform;
		};
		var aomap : {
			var aoMap : three.IUniform;
			var aoMapIntensity : three.IUniform;
		};
		var lightmap : {
			var lightMap : three.IUniform;
			var lightMapIntensity : three.IUniform;
		};
		var emissivemap : {
			var emissiveMap : three.IUniform;
		};
		var bumpmap : {
			var bumpMap : three.IUniform;
			var bumpScale : three.IUniform;
		};
		var normalmap : {
			var normalMap : three.IUniform;
			var normalScale : three.IUniform;
		};
		var displacementmap : {
			var displacementMap : three.IUniform;
			var displacementScale : three.IUniform;
			var displacementBias : three.IUniform;
		};
		var roughnessmap : {
			var roughnessMap : three.IUniform;
		};
		var metalnessmap : {
			var metalnessMap : three.IUniform;
		};
		var gradientmap : {
			var gradientMap : three.IUniform;
		};
		var fog : {
			var fogDensity : three.IUniform;
			var fogNear : three.IUniform;
			var fogFar : three.IUniform;
			var fogColor : three.IUniform;
		};
		var lights : {
			var ambientLightColor : three.IUniform;
			var directionalLights : {
				var value : Array<Dynamic>;
				var properties : {
					var direction : { };
					var color : { };
					var shadow : { };
					var shadowBias : { };
					var shadowRadius : { };
					var shadowMapSize : { };
				};
			};
			var directionalShadowMap : three.IUniform;
			var directionalShadowMatrix : three.IUniform;
			var spotLights : {
				var value : Array<Dynamic>;
				var properties : {
					var color : { };
					var position : { };
					var direction : { };
					var distance : { };
					var coneCos : { };
					var penumbraCos : { };
					var decay : { };
					var shadow : { };
					var shadowBias : { };
					var shadowRadius : { };
					var shadowMapSize : { };
				};
			};
			var spotShadowMap : three.IUniform;
			var spotShadowMatrix : three.IUniform;
			var pointLights : {
				var value : Array<Dynamic>;
				var properties : {
					var color : { };
					var position : { };
					var decay : { };
					var distance : { };
					var shadow : { };
					var shadowBias : { };
					var shadowRadius : { };
					var shadowMapSize : { };
				};
			};
			var pointShadowMap : three.IUniform;
			var pointShadowMatrix : three.IUniform;
			var hemisphereLights : {
				var value : Array<Dynamic>;
				var properties : {
					var direction : { };
					var skycolor : { };
					var groundColor : { };
				};
			};
			var rectAreaLights : {
				var value : Array<Dynamic>;
				var properties : {
					var color : { };
					var position : { };
					var width : { };
					var height : { };
				};
			};
		};
		var points : {
			var diffuse : three.IUniform;
			var opacity : three.IUniform;
			var size : three.IUniform;
			var scale : three.IUniform;
			var map : three.IUniform;
			var uvTransform : three.IUniform;
		};
	};
	static var ShaderChunk : {
		var alphamap_fragment : String;
		var alphamap_pars_fragment : String;
		var alphatest_fragment : String;
		var aomap_fragment : String;
		var aomap_pars_fragment : String;
		var begin_vertex : String;
		var beginnormal_vertex : String;
		var bsdfs : String;
		var bumpmap_pars_fragment : String;
		var clipping_planes_fragment : String;
		var clipping_planes_pars_fragment : String;
		var clipping_planes_pars_vertex : String;
		var clipping_planes_vertex : String;
		var color_fragment : String;
		var color_pars_fragment : String;
		var color_pars_vertex : String;
		var color_vertex : String;
		var common : String;
		var cube_frag : String;
		var cube_vert : String;
		var cube_uv_reflection_fragment : String;
		var defaultnormal_vertex : String;
		var depth_frag : String;
		var depth_vert : String;
		var distanceRGBA_frag : String;
		var distanceRGBA_vert : String;
		var displacementmap_vertex : String;
		var displacementmap_pars_vertex : String;
		var emissivemap_fragment : String;
		var emissivemap_pars_fragment : String;
		var encodings_pars_fragment : String;
		var encodings_fragment : String;
		var envmap_fragment : String;
		var envmap_pars_fragment : String;
		var envmap_pars_vertex : String;
		var envmap_vertex : String;
		var equirect_frag : String;
		var equirect_vert : String;
		var fog_fragment : String;
		var fog_pars_fragment : String;
		var linedashed_frag : String;
		var linedashed_vert : String;
		var lightmap_fragment : String;
		var lightmap_pars_fragment : String;
		var lights_lambert_vertex : String;
		var lights_pars_begin : String;
		var lights_pars_map : String;
		var lights_phong_fragment : String;
		var lights_phong_pars_fragment : String;
		var lights_physical_fragment : String;
		var lights_physical_pars_fragment : String;
		var lights_fragment_begin : String;
		var lights_fragment_maps : String;
		var lights_fragment_end : String;
		var logdepthbuf_fragment : String;
		var logdepthbuf_pars_fragment : String;
		var logdepthbuf_pars_vertex : String;
		var logdepthbuf_vertex : String;
		var map_fragment : String;
		var map_pars_fragment : String;
		var map_particle_fragment : String;
		var map_particle_pars_fragment : String;
		var meshbasic_frag : String;
		var meshbasic_vert : String;
		var meshlambert_frag : String;
		var meshlambert_vert : String;
		var meshphong_frag : String;
		var meshphong_vert : String;
		var meshphysical_frag : String;
		var meshphysical_vert : String;
		var metalnessmap_fragment : String;
		var metalnessmap_pars_fragment : String;
		var morphnormal_vertex : String;
		var morphtarget_pars_vertex : String;
		var morphtarget_vertex : String;
		var normal_flip : String;
		var normal_frag : String;
		var normal_fragment_begin : String;
		var normal_fragment_maps : String;
		var normal_vert : String;
		var normalmap_pars_fragment : String;
		var packing : String;
		var points_frag : String;
		var points_vert : String;
		var shadow_frag : String;
		var shadow_vert : String;
		var premultiplied_alpha_fragment : String;
		var project_vertex : String;
		var roughnessmap_fragment : String;
		var roughnessmap_pars_fragment : String;
		var shadowmap_pars_fragment : String;
		var shadowmap_pars_vertex : String;
		var shadowmap_vertex : String;
		var shadowmask_pars_fragment : String;
		var skinbase_vertex : String;
		var skinning_pars_vertex : String;
		var skinning_vertex : String;
		var skinnormal_vertex : String;
		var specularmap_fragment : String;
		var specularmap_pars_fragment : String;
		var tonemapping_fragment : String;
		var tonemapping_pars_fragment : String;
		var uv2_pars_fragment : String;
		var uv2_pars_vertex : String;
		var uv2_vertex : String;
		var uv_pars_fragment : String;
		var uv_pars_vertex : String;
		var uv_vertex : String;
		var worldpos_vertex : String;
	};
	static var LineStrip : Float;
	static var LinePieces : Float;
	static var TextureIdCount : Float;
	static var MaterialIdCount : Float;
	static var DefaultLoadingManager : three.LoadingManager;
	static var AudioContext : ts.html.IAudioContext;
	static var GeometryIdCount : Float;
	static var Object3DIdCount : Float;
	static var REVISION : String;
	static var CullFaceNone : three.CullFace;
	static var CullFaceBack : three.CullFace;
	static var CullFaceFront : three.CullFace;
	static var CullFaceFrontBack : three.CullFace;
	static var FrontFaceDirectionCW : three.FrontFaceDirection;
	static var FrontFaceDirectionCCW : three.FrontFaceDirection;
	static var BasicShadowMap : three.ShadowMapType;
	static var PCFShadowMap : three.ShadowMapType;
	static var PCFSoftShadowMap : three.ShadowMapType;
	static var FrontSide : three.Side;
	static var BackSide : three.Side;
	static var DoubleSide : three.Side;
	static var FlatShading : three.Shading;
	static var SmoothShading : three.Shading;
	static var NoColors : three.Colors;
	static var FaceColors : three.Colors;
	static var VertexColors : three.Colors;
	static var NoBlending : three.Blending;
	static var NormalBlending : three.Blending;
	static var AdditiveBlending : three.Blending;
	static var SubtractiveBlending : three.Blending;
	static var MultiplyBlending : three.Blending;
	static var CustomBlending : three.Blending;
	static var AddEquation : three.BlendingEquation;
	static var SubtractEquation : three.BlendingEquation;
	static var ReverseSubtractEquation : three.BlendingEquation;
	static var MinEquation : three.BlendingEquation;
	static var MaxEquation : three.BlendingEquation;
	static var ZeroFactor : three.BlendingDstFactor;
	static var OneFactor : three.BlendingDstFactor;
	static var SrcColorFactor : three.BlendingDstFactor;
	static var OneMinusSrcColorFactor : three.BlendingDstFactor;
	static var SrcAlphaFactor : three.BlendingDstFactor;
	static var OneMinusSrcAlphaFactor : three.BlendingDstFactor;
	static var DstAlphaFactor : three.BlendingDstFactor;
	static var OneMinusDstAlphaFactor : three.BlendingDstFactor;
	static var DstColorFactor : three.BlendingDstFactor;
	static var OneMinusDstColorFactor : three.BlendingDstFactor;
	static var SrcAlphaSaturateFactor : three.BlendingSrcFactor;
	static var NeverDepth : three.DepthModes;
	static var AlwaysDepth : three.DepthModes;
	static var LessDepth : three.DepthModes;
	static var LessEqualDepth : three.DepthModes;
	static var EqualDepth : three.DepthModes;
	static var GreaterEqualDepth : three.DepthModes;
	static var GreaterDepth : three.DepthModes;
	static var NotEqualDepth : three.DepthModes;
	static var MultiplyOperation : three.Combine;
	static var MixOperation : three.Combine;
	static var AddOperation : three.Combine;
	static var NoToneMapping : three.ToneMapping;
	static var LinearToneMapping : three.ToneMapping;
	static var ReinhardToneMapping : three.ToneMapping;
	static var Uncharted2ToneMapping : three.ToneMapping;
	static var CineonToneMapping : three.ToneMapping;
	static var UVMapping : three.Mapping;
	static var CubeReflectionMapping : three.Mapping;
	static var CubeRefractionMapping : three.Mapping;
	static var EquirectangularReflectionMapping : three.Mapping;
	static var EquirectangularRefractionMapping : three.Mapping;
	static var SphericalReflectionMapping : three.Mapping;
	static var CubeUVReflectionMapping : three.Mapping;
	static var CubeUVRefractionMapping : three.Mapping;
	static var RepeatWrapping : three.Wrapping;
	static var ClampToEdgeWrapping : three.Wrapping;
	static var MirroredRepeatWrapping : three.Wrapping;
	static var NearestFilter : three.TextureFilter;
	static var NearestMipmapNearestFilter : three.TextureFilter;
	static var NearestMipMapNearestFilter : three.TextureFilter;
	static var NearestMipmapLinearFilter : three.TextureFilter;
	static var NearestMipMapLinearFilter : three.TextureFilter;
	static var LinearFilter : three.TextureFilter;
	static var LinearMipmapNearestFilter : three.TextureFilter;
	static var LinearMipMapNearestFilter : three.TextureFilter;
	static var LinearMipmapLinearFilter : three.TextureFilter;
	static var LinearMipMapLinearFilter : three.TextureFilter;
	static var UnsignedByteType : three.TextureDataType;
	static var ByteType : three.TextureDataType;
	static var ShortType : three.TextureDataType;
	static var UnsignedShortType : three.TextureDataType;
	static var IntType : three.TextureDataType;
	static var UnsignedIntType : three.TextureDataType;
	static var FloatType : three.TextureDataType;
	static var HalfFloatType : three.TextureDataType;
	static var UnsignedShort4444Type : three.PixelType;
	static var UnsignedShort5551Type : three.PixelType;
	static var UnsignedShort565Type : three.PixelType;
	static var UnsignedInt248Type : three.PixelType;
	static var AlphaFormat : three.PixelFormat;
	static var RGBFormat : three.PixelFormat;
	static var RGBAFormat : three.PixelFormat;
	static var LuminanceFormat : three.PixelFormat;
	static var LuminanceAlphaFormat : three.PixelFormat;
	static var RGBEFormat : three.PixelFormat;
	static var DepthFormat : three.PixelFormat;
	static var DepthStencilFormat : three.PixelFormat;
	static var RedFormat : three.PixelFormat;
	static var RGB_S3TC_DXT1_Format : three.CompressedPixelFormat;
	static var RGBA_S3TC_DXT1_Format : three.CompressedPixelFormat;
	static var RGBA_S3TC_DXT3_Format : three.CompressedPixelFormat;
	static var RGBA_S3TC_DXT5_Format : three.CompressedPixelFormat;
	static var RGB_PVRTC_4BPPV1_Format : three.CompressedPixelFormat;
	static var RGB_PVRTC_2BPPV1_Format : three.CompressedPixelFormat;
	static var RGBA_PVRTC_4BPPV1_Format : three.CompressedPixelFormat;
	static var RGBA_PVRTC_2BPPV1_Format : three.CompressedPixelFormat;
	static var RGB_ETC1_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_4x4_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_5x4_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_5x5_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_6x5_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_6x6_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_8x5_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_8x6_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_8x8_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_10x5_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_10x6_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_10x8_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_10x10_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_12x10_Format : three.CompressedPixelFormat;
	static var RGBA_ASTC_12x12_Format : three.CompressedPixelFormat;
	static var LoopOnce : three.AnimationActionLoopStyles;
	static var LoopRepeat : three.AnimationActionLoopStyles;
	static var LoopPingPong : three.AnimationActionLoopStyles;
	static var InterpolateDiscrete : three.InterpolationModes;
	static var InterpolateLinear : three.InterpolationModes;
	static var InterpolateSmooth : three.InterpolationModes;
	static var ZeroCurvatureEnding : three.InterpolationEndingModes;
	static var ZeroSlopeEnding : three.InterpolationEndingModes;
	static var WrapAroundEnding : three.InterpolationEndingModes;
	static var TrianglesDrawMode : three.TrianglesDrawModes;
	static var TriangleStripDrawMode : three.TrianglesDrawModes;
	static var TriangleFanDrawMode : three.TrianglesDrawModes;
	static var LinearEncoding : three.TextureEncoding;
	static var sRGBEncoding : three.TextureEncoding;
	static var GammaEncoding : three.TextureEncoding;
	static var RGBEEncoding : three.TextureEncoding;
	static var LogLuvEncoding : three.TextureEncoding;
	static var RGBM7Encoding : three.TextureEncoding;
	static var RGBM16Encoding : three.TextureEncoding;
	static var RGBDEncoding : three.TextureEncoding;
	static var BasicDepthPacking : three.DepthPackingStrategies;
	static var RGBADepthPacking : three.DepthPackingStrategies;
	static var TangentSpaceNormalMap : three.NormalMapTypes;
	static var ObjectSpaceNormalMap : three.NormalMapTypes;
	static var ZeroStencilOp : three.StencilOp;
	static var KeepStencilOp : three.StencilOp;
	static var ReplaceStencilOp : three.StencilOp;
	static var IncrementStencilOp : three.StencilOp;
	static var DecrementStencilOp : three.StencilOp;
	static var IncrementWrapStencilOp : three.StencilOp;
	static var DecrementWrapStencilOp : three.StencilOp;
	static var InvertStencilOp : three.StencilOp;
	static var NeverStencilFunc : three.StencilFunc;
	static var LessStencilFunc : three.StencilFunc;
	static var EqualStencilFunc : three.StencilFunc;
	static var LessEqualStencilFunc : three.StencilFunc;
	static var GreaterStencilFunc : three.StencilFunc;
	static var NotEqualStencilFunc : three.StencilFunc;
	static var GreaterEqualStencilFunc : three.StencilFunc;
	static var AlwaysStencilFunc : three.StencilFunc;
}