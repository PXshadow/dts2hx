package ts.lib;
extern typedef IWebAuthentication = {
	function getAssertion(assertionChallenge:Null<haxe.extern.EitherType<IArrayBuffer, haxe.extern.EitherType<IFloat32Array, haxe.extern.EitherType<IFloat64Array, haxe.extern.EitherType<IUint8Array, haxe.extern.EitherType<IInt8Array, haxe.extern.EitherType<IInt16Array, haxe.extern.EitherType<IInt32Array, haxe.extern.EitherType<IUint16Array, haxe.extern.EitherType<IUint32Array, haxe.extern.EitherType<IUint8ClampedArray, IDataView>>>>>>>>>>>, ?options:ts.html.AssertionOptions):IPromise<ts.html.IWebAuthnAssertion>;
	@:overload(function(accountInformation:ts.html.Account, cryptoParameters:Iterable<ts.html.ScopedCredentialParameters>, attestationChallenge:Null<haxe.extern.EitherType<IArrayBuffer, haxe.extern.EitherType<IFloat32Array, haxe.extern.EitherType<IFloat64Array, haxe.extern.EitherType<IUint8Array, haxe.extern.EitherType<IInt8Array, haxe.extern.EitherType<IInt16Array, haxe.extern.EitherType<IInt32Array, haxe.extern.EitherType<IUint16Array, haxe.extern.EitherType<IUint32Array, haxe.extern.EitherType<IUint8ClampedArray, IDataView>>>>>>>>>>>, ?options:ts.html.ScopedCredentialOptions):IPromise<ts.html.IScopedCredentialInfo> { })
	function makeCredential(accountInformation:ts.html.Account, cryptoParameters:std.Array<ts.html.ScopedCredentialParameters>, attestationChallenge:Null<haxe.extern.EitherType<IArrayBuffer, haxe.extern.EitherType<IFloat32Array, haxe.extern.EitherType<IFloat64Array, haxe.extern.EitherType<IUint8Array, haxe.extern.EitherType<IInt8Array, haxe.extern.EitherType<IInt16Array, haxe.extern.EitherType<IInt32Array, haxe.extern.EitherType<IUint16Array, haxe.extern.EitherType<IUint32Array, haxe.extern.EitherType<IUint8ClampedArray, IDataView>>>>>>>>>>>, ?options:ts.html.ScopedCredentialOptions):IPromise<ts.html.IScopedCredentialInfo>;
};