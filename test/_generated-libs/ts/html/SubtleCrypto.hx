package ts.html;
/**
	This Web Crypto API interface provides a number of low-level cryptographic functions. It is accessed via the Crypto.subtle properties available in a window context (via Window.crypto).
**/
@:native("SubtleCrypto") extern class SubtleCrypto {
	function new();
	function decrypt(algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<RsaOaepParams, haxe.extern.EitherType<AesCtrParams, haxe.extern.EitherType<AesCbcParams, haxe.extern.EitherType<AesCmacParams, haxe.extern.EitherType<AesGcmParams, AesCfbParams>>>>>>, key:ICryptoKey, data:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>):ts.lib.PromiseLike<ts.lib.IArrayBuffer>;
	function deriveBits(algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<EcdhKeyDeriveParams, haxe.extern.EitherType<DhKeyDeriveParams, haxe.extern.EitherType<ConcatParams, haxe.extern.EitherType<HkdfCtrParams, Pbkdf2Params>>>>>, baseKey:ICryptoKey, length:Float):ts.lib.PromiseLike<ts.lib.IArrayBuffer>;
	function deriveKey(algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<EcdhKeyDeriveParams, haxe.extern.EitherType<DhKeyDeriveParams, haxe.extern.EitherType<ConcatParams, haxe.extern.EitherType<HkdfCtrParams, Pbkdf2Params>>>>>, baseKey:ICryptoKey, derivedKeyType:haxe.extern.EitherType<String, haxe.extern.EitherType<ConcatParams, haxe.extern.EitherType<HkdfCtrParams, haxe.extern.EitherType<Pbkdf2Params, haxe.extern.EitherType<AesDerivedKeyParams, HmacImportParams>>>>>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKey>;
	function digest(algorithm:haxe.extern.EitherType<String, Algorithm>, data:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>):ts.lib.PromiseLike<ts.lib.IArrayBuffer>;
	function encrypt(algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<RsaOaepParams, haxe.extern.EitherType<AesCtrParams, haxe.extern.EitherType<AesCbcParams, haxe.extern.EitherType<AesCmacParams, haxe.extern.EitherType<AesGcmParams, AesCfbParams>>>>>>, key:ICryptoKey, data:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>):ts.lib.PromiseLike<ts.lib.IArrayBuffer>;
	@:overload(function(format:String, key:ICryptoKey):ts.lib.PromiseLike<ts.lib.IArrayBuffer> { })
	@:overload(function(format:String, key:ICryptoKey):ts.lib.PromiseLike<haxe.extern.EitherType<ts.lib.IArrayBuffer, JsonWebKey>> { })
	function exportKey(format:String, key:ICryptoKey):ts.lib.PromiseLike<JsonWebKey>;
	@:overload(function(algorithm:haxe.extern.EitherType<RsaHashedKeyGenParams, haxe.extern.EitherType<EcKeyGenParams, DhKeyGenParams>>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKeyPair> { })
	@:overload(function(algorithm:haxe.extern.EitherType<Pbkdf2Params, haxe.extern.EitherType<AesKeyGenParams, HmacKeyGenParams>>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKey> { })
	function generateKey(algorithm:String, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<haxe.extern.EitherType<ICryptoKey, ICryptoKeyPair>>;
	@:overload(function(format:String, keyData:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>, algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<HmacImportParams, haxe.extern.EitherType<RsaHashedImportParams, haxe.extern.EitherType<EcKeyImportParams, haxe.extern.EitherType<DhImportKeyParams, AesKeyAlgorithm>>>>>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKey> { })
	@:overload(function(format:String, keyData:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, haxe.extern.EitherType<ts.lib.IDataView, JsonWebKey>>>>>>>>>>>, algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<HmacImportParams, haxe.extern.EitherType<RsaHashedImportParams, haxe.extern.EitherType<EcKeyImportParams, haxe.extern.EitherType<DhImportKeyParams, AesKeyAlgorithm>>>>>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKey> { })
	function importKey(format:String, keyData:JsonWebKey, algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<HmacImportParams, haxe.extern.EitherType<RsaHashedImportParams, haxe.extern.EitherType<EcKeyImportParams, haxe.extern.EitherType<DhImportKeyParams, AesKeyAlgorithm>>>>>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKey>;
	function sign(algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<AesCmacParams, haxe.extern.EitherType<RsaPssParams, EcdsaParams>>>, key:ICryptoKey, data:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>):ts.lib.PromiseLike<ts.lib.IArrayBuffer>;
	function unwrapKey(format:String, wrappedKey:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>, unwrappingKey:ICryptoKey, unwrapAlgorithm:haxe.extern.EitherType<String, Algorithm>, unwrappedKeyAlgorithm:haxe.extern.EitherType<String, Algorithm>, extractable:Bool, keyUsages:std.Array<String>):ts.lib.PromiseLike<ICryptoKey>;
	function verify(algorithm:haxe.extern.EitherType<String, haxe.extern.EitherType<AesCmacParams, haxe.extern.EitherType<RsaPssParams, EcdsaParams>>>, key:ICryptoKey, signature:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>, data:haxe.extern.EitherType<ts.lib.IArrayBuffer, haxe.extern.EitherType<ts.lib.IFloat32Array, haxe.extern.EitherType<ts.lib.IFloat64Array, haxe.extern.EitherType<ts.lib.IUint8Array, haxe.extern.EitherType<ts.lib.IInt8Array, haxe.extern.EitherType<ts.lib.IInt16Array, haxe.extern.EitherType<ts.lib.IInt32Array, haxe.extern.EitherType<ts.lib.IUint16Array, haxe.extern.EitherType<ts.lib.IUint32Array, haxe.extern.EitherType<ts.lib.IUint8ClampedArray, ts.lib.IDataView>>>>>>>>>>):ts.lib.PromiseLike<Bool>;
	function wrapKey(format:String, key:ICryptoKey, wrappingKey:ICryptoKey, wrapAlgorithm:haxe.extern.EitherType<String, Algorithm>):ts.lib.PromiseLike<ts.lib.IArrayBuffer>;
	static var prototype : ISubtleCrypto;
}