package js.html;
extern typedef IWebGL2RenderingContext = {
	function beginQuery(target:Float, query:IWebGLQuery):Void;
	function beginTransformFeedback(primitiveMode:Float):Void;
	function bindBufferBase(target:Float, index:Float, buffer:Null<IWebGLBuffer>):Void;
	function bindBufferRange(target:Float, index:Float, buffer:Null<IWebGLBuffer>, offset:Float, size:Float):Void;
	function bindSampler(unit:Float, sampler:Null<IWebGLSampler>):Void;
	function bindTransformFeedback(target:Float, tf:Null<IWebGLTransformFeedback>):Void;
	function bindVertexArray(array:Null<IWebGLVertexArrayObject>):Void;
	function blitFramebuffer(srcX0:Float, srcY0:Float, srcX1:Float, srcY1:Float, dstX0:Float, dstY0:Float, dstX1:Float, dstY1:Float, mask:Float, filter:Float):Void;
	function clearBufferfi(buffer:Float, drawbuffer:Float, depth:Float, stencil:Float):Void;
	@:overload(function(buffer:Float, drawbuffer:Float, values:js.lib.Iterable<Float>, ?srcOffset:Float):Void { })
	function clearBufferfv(buffer:Float, drawbuffer:Float, values:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float):Void;
	@:overload(function(buffer:Float, drawbuffer:Float, values:js.lib.Iterable<Float>, ?srcOffset:Float):Void { })
	function clearBufferiv(buffer:Float, drawbuffer:Float, values:haxe.extern.EitherType<js.lib.IInt32Array, std.Array<Float>>, ?srcOffset:Float):Void;
	@:overload(function(buffer:Float, drawbuffer:Float, values:js.lib.Iterable<Float>, ?srcOffset:Float):Void { })
	function clearBufferuiv(buffer:Float, drawbuffer:Float, values:haxe.extern.EitherType<js.lib.IUint32Array, std.Array<Float>>, ?srcOffset:Float):Void;
	function clientWaitSync(sync:IWebGLSync, flags:Float, timeout:Float):Float;
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, depth:Float, border:Float, srcData:js.lib.ArrayBufferView, ?srcOffset:Float, ?srcLengthOverride:Float):Void { })
	function compressedTexImage3D(target:Float, level:Float, internalformat:Float, width:Float, height:Float, depth:Float, border:Float, imageSize:Float, offset:Float):Void;
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, zoffset:Float, width:Float, height:Float, depth:Float, format:Float, srcData:js.lib.ArrayBufferView, ?srcOffset:Float, ?srcLengthOverride:Float):Void { })
	function compressedTexSubImage3D(target:Float, level:Float, xoffset:Float, yoffset:Float, zoffset:Float, width:Float, height:Float, depth:Float, format:Float, imageSize:Float, offset:Float):Void;
	function copyBufferSubData(readTarget:Float, writeTarget:Float, readOffset:Float, writeOffset:Float, size:Float):Void;
	function copyTexSubImage3D(target:Float, level:Float, xoffset:Float, yoffset:Float, zoffset:Float, x:Float, y:Float, width:Float, height:Float):Void;
	function createQuery():Null<IWebGLQuery>;
	function createSampler():Null<IWebGLSampler>;
	function createTransformFeedback():Null<IWebGLTransformFeedback>;
	function createVertexArray():Null<IWebGLVertexArrayObject>;
	function deleteQuery(query:Null<IWebGLQuery>):Void;
	function deleteSampler(sampler:Null<IWebGLSampler>):Void;
	function deleteSync(sync:Null<IWebGLSync>):Void;
	function deleteTransformFeedback(tf:Null<IWebGLTransformFeedback>):Void;
	function deleteVertexArray(vertexArray:Null<IWebGLVertexArrayObject>):Void;
	function drawArraysInstanced(mode:Float, first:Float, count:Float, instanceCount:Float):Void;
	@:overload(function(buffers:js.lib.Iterable<Float>):Void { })
	function drawBuffers(buffers:std.Array<Float>):Void;
	function drawElementsInstanced(mode:Float, count:Float, type:Float, offset:Float, instanceCount:Float):Void;
	function drawRangeElements(mode:Float, start:Float, end:Float, count:Float, type:Float, offset:Float):Void;
	function endQuery(target:Float):Void;
	function endTransformFeedback():Void;
	function fenceSync(condition:Float, flags:Float):Null<IWebGLSync>;
	function framebufferTextureLayer(target:Float, attachment:Float, texture:Null<IWebGLTexture>, level:Float, layer:Float):Void;
	function getActiveUniformBlockName(program:IWebGLProgram, uniformBlockIndex:Float):Null<String>;
	function getActiveUniformBlockParameter(program:IWebGLProgram, uniformBlockIndex:Float, pname:Float):Any;
	@:overload(function(program:IWebGLProgram, uniformIndices:js.lib.Iterable<Float>, pname:Float):Any { })
	function getActiveUniforms(program:IWebGLProgram, uniformIndices:std.Array<Float>, pname:Float):Any;
	function getBufferSubData(target:Float, srcByteOffset:Float, dstBuffer:js.lib.ArrayBufferView, ?dstOffset:Float, ?length:Float):Void;
	function getFragDataLocation(program:IWebGLProgram, name:String):Float;
	function getIndexedParameter(target:Float, index:Float):Any;
	function getInternalformatParameter(target:Float, internalformat:Float, pname:Float):Any;
	function getQuery(target:Float, pname:Float):Null<IWebGLQuery>;
	function getQueryParameter(query:IWebGLQuery, pname:Float):Any;
	function getSamplerParameter(sampler:IWebGLSampler, pname:Float):Any;
	function getSyncParameter(sync:IWebGLSync, pname:Float):Any;
	function getTransformFeedbackVarying(program:IWebGLProgram, index:Float):Null<IWebGLActiveInfo>;
	function getUniformBlockIndex(program:IWebGLProgram, uniformBlockName:String):Float;
	@:overload(function(program:IWebGLProgram, uniformNames:js.lib.Iterable<String>):Null<js.lib.Iterable<Float>> { })
	function getUniformIndices(program:IWebGLProgram, uniformNames:std.Array<String>):Null<std.Array<Float>>;
	@:overload(function(target:Float, attachments:js.lib.Iterable<Float>):Void { })
	function invalidateFramebuffer(target:Float, attachments:std.Array<Float>):Void;
	@:overload(function(target:Float, attachments:js.lib.Iterable<Float>, x:Float, y:Float, width:Float, height:Float):Void { })
	function invalidateSubFramebuffer(target:Float, attachments:std.Array<Float>, x:Float, y:Float, width:Float, height:Float):Void;
	function isQuery(query:Null<IWebGLQuery>):Bool;
	function isSampler(sampler:Null<IWebGLSampler>):Bool;
	function isSync(sync:Null<IWebGLSync>):Bool;
	function isTransformFeedback(tf:Null<IWebGLTransformFeedback>):Bool;
	function isVertexArray(vertexArray:Null<IWebGLVertexArrayObject>):Bool;
	function pauseTransformFeedback():Void;
	function readBuffer(src:Float):Void;
	function renderbufferStorageMultisample(target:Float, samples:Float, internalformat:Float, width:Float, height:Float):Void;
	function resumeTransformFeedback():Void;
	function samplerParameterf(sampler:IWebGLSampler, pname:Float, param:Float):Void;
	function samplerParameteri(sampler:IWebGLSampler, pname:Float, param:Float):Void;
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, depth:Float, border:Float, format:Float, type:Float, source:haxe.extern.EitherType<IHTMLCanvasElement, haxe.extern.EitherType<IHTMLVideoElement, haxe.extern.EitherType<IImageData, haxe.extern.EitherType<IHTMLImageElement, haxe.extern.EitherType<IOffscreenCanvas, IImageBitmap>>>>>):Void { })
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, depth:Float, border:Float, format:Float, type:Float, srcData:Null<js.lib.ArrayBufferView>):Void { })
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, depth:Float, border:Float, format:Float, type:Float, srcData:js.lib.ArrayBufferView, srcOffset:Float):Void { })
	function texImage3D(target:Float, level:Float, internalformat:Float, width:Float, height:Float, depth:Float, border:Float, format:Float, type:Float, pboOffset:Float):Void;
	function texStorage2D(target:Float, levels:Float, internalformat:Float, width:Float, height:Float):Void;
	function texStorage3D(target:Float, levels:Float, internalformat:Float, width:Float, height:Float, depth:Float):Void;
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, zoffset:Float, width:Float, height:Float, depth:Float, format:Float, type:Float, source:haxe.extern.EitherType<IHTMLCanvasElement, haxe.extern.EitherType<IHTMLVideoElement, haxe.extern.EitherType<IImageData, haxe.extern.EitherType<IHTMLImageElement, haxe.extern.EitherType<IOffscreenCanvas, IImageBitmap>>>>>):Void { })
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, zoffset:Float, width:Float, height:Float, depth:Float, format:Float, type:Float, srcData:Null<js.lib.ArrayBufferView>, ?srcOffset:Float):Void { })
	function texSubImage3D(target:Float, level:Float, xoffset:Float, yoffset:Float, zoffset:Float, width:Float, height:Float, depth:Float, format:Float, type:Float, pboOffset:Float):Void;
	@:overload(function(program:IWebGLProgram, varyings:js.lib.Iterable<String>, bufferMode:Float):Void { })
	function transformFeedbackVaryings(program:IWebGLProgram, varyings:std.Array<String>, bufferMode:Float):Void;
	function uniform1ui(location:Null<IWebGLUniformLocation>, v0:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform1uiv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IUint32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	function uniform2ui(location:Null<IWebGLUniformLocation>, v0:Float, v1:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform2uiv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IUint32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	function uniform3ui(location:Null<IWebGLUniformLocation>, v0:Float, v1:Float, v2:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform3uiv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IUint32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	function uniform4ui(location:Null<IWebGLUniformLocation>, v0:Float, v1:Float, v2:Float, v3:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform4uiv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IUint32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	function uniformBlockBinding(program:IWebGLProgram, uniformBlockIndex:Float, uniformBlockBinding:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix2x3fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix2x4fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix3x2fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix3x4fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix4x2fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix4x3fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	function vertexAttribDivisor(index:Float, divisor:Float):Void;
	function vertexAttribI4i(index:Float, x:Float, y:Float, z:Float, w:Float):Void;
	@:overload(function(index:Float, values:js.lib.Iterable<Float>):Void { })
	function vertexAttribI4iv(index:Float, values:haxe.extern.EitherType<js.lib.IInt32Array, std.Array<Float>>):Void;
	function vertexAttribI4ui(index:Float, x:Float, y:Float, z:Float, w:Float):Void;
	@:overload(function(index:Float, values:js.lib.Iterable<Float>):Void { })
	function vertexAttribI4uiv(index:Float, values:haxe.extern.EitherType<js.lib.IUint32Array, std.Array<Float>>):Void;
	function vertexAttribIPointer(index:Float, size:Float, type:Float, stride:Float, offset:Float):Void;
	function waitSync(sync:IWebGLSync, flags:Float, timeout:Float):Void;
	final ACTIVE_UNIFORM_BLOCKS : Float;
	final ALREADY_SIGNALED : Float;
	final ANY_SAMPLES_PASSED : Float;
	final ANY_SAMPLES_PASSED_CONSERVATIVE : Float;
	final COLOR : Float;
	final COLOR_ATTACHMENT1 : Float;
	final COLOR_ATTACHMENT10 : Float;
	final COLOR_ATTACHMENT11 : Float;
	final COLOR_ATTACHMENT12 : Float;
	final COLOR_ATTACHMENT13 : Float;
	final COLOR_ATTACHMENT14 : Float;
	final COLOR_ATTACHMENT15 : Float;
	final COLOR_ATTACHMENT2 : Float;
	final COLOR_ATTACHMENT3 : Float;
	final COLOR_ATTACHMENT4 : Float;
	final COLOR_ATTACHMENT5 : Float;
	final COLOR_ATTACHMENT6 : Float;
	final COLOR_ATTACHMENT7 : Float;
	final COLOR_ATTACHMENT8 : Float;
	final COLOR_ATTACHMENT9 : Float;
	final COMPARE_REF_TO_TEXTURE : Float;
	final CONDITION_SATISFIED : Float;
	final COPY_READ_BUFFER : Float;
	final COPY_READ_BUFFER_BINDING : Float;
	final COPY_WRITE_BUFFER : Float;
	final COPY_WRITE_BUFFER_BINDING : Float;
	final CURRENT_QUERY : Float;
	final DEPTH : Float;
	final DEPTH24_STENCIL8 : Float;
	final DEPTH32F_STENCIL8 : Float;
	final DEPTH_COMPONENT24 : Float;
	final DEPTH_COMPONENT32F : Float;
	final DRAW_BUFFER0 : Float;
	final DRAW_BUFFER1 : Float;
	final DRAW_BUFFER10 : Float;
	final DRAW_BUFFER11 : Float;
	final DRAW_BUFFER12 : Float;
	final DRAW_BUFFER13 : Float;
	final DRAW_BUFFER14 : Float;
	final DRAW_BUFFER15 : Float;
	final DRAW_BUFFER2 : Float;
	final DRAW_BUFFER3 : Float;
	final DRAW_BUFFER4 : Float;
	final DRAW_BUFFER5 : Float;
	final DRAW_BUFFER6 : Float;
	final DRAW_BUFFER7 : Float;
	final DRAW_BUFFER8 : Float;
	final DRAW_BUFFER9 : Float;
	final DRAW_FRAMEBUFFER : Float;
	final DRAW_FRAMEBUFFER_BINDING : Float;
	final DYNAMIC_COPY : Float;
	final DYNAMIC_READ : Float;
	final FLOAT_32_UNSIGNED_INT_24_8_REV : Float;
	final FLOAT_MAT2x3 : Float;
	final FLOAT_MAT2x4 : Float;
	final FLOAT_MAT3x2 : Float;
	final FLOAT_MAT3x4 : Float;
	final FLOAT_MAT4x2 : Float;
	final FLOAT_MAT4x3 : Float;
	final FRAGMENT_SHADER_DERIVATIVE_HINT : Float;
	final FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE : Float;
	final FRAMEBUFFER_ATTACHMENT_BLUE_SIZE : Float;
	final FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING : Float;
	final FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE : Float;
	final FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE : Float;
	final FRAMEBUFFER_ATTACHMENT_GREEN_SIZE : Float;
	final FRAMEBUFFER_ATTACHMENT_RED_SIZE : Float;
	final FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE : Float;
	final FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER : Float;
	final FRAMEBUFFER_DEFAULT : Float;
	final FRAMEBUFFER_INCOMPLETE_MULTISAMPLE : Float;
	final HALF_FLOAT : Float;
	final INTERLEAVED_ATTRIBS : Float;
	final INT_2_10_10_10_REV : Float;
	final INT_SAMPLER_2D : Float;
	final INT_SAMPLER_2D_ARRAY : Float;
	final INT_SAMPLER_3D : Float;
	final INT_SAMPLER_CUBE : Float;
	final INVALID_INDEX : Float;
	final MAX : Float;
	final MAX_3D_TEXTURE_SIZE : Float;
	final MAX_ARRAY_TEXTURE_LAYERS : Float;
	final MAX_CLIENT_WAIT_TIMEOUT_WEBGL : Float;
	final MAX_COLOR_ATTACHMENTS : Float;
	final MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS : Float;
	final MAX_COMBINED_UNIFORM_BLOCKS : Float;
	final MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS : Float;
	final MAX_DRAW_BUFFERS : Float;
	final MAX_ELEMENTS_INDICES : Float;
	final MAX_ELEMENTS_VERTICES : Float;
	final MAX_ELEMENT_INDEX : Float;
	final MAX_FRAGMENT_INPUT_COMPONENTS : Float;
	final MAX_FRAGMENT_UNIFORM_BLOCKS : Float;
	final MAX_FRAGMENT_UNIFORM_COMPONENTS : Float;
	final MAX_PROGRAM_TEXEL_OFFSET : Float;
	final MAX_SAMPLES : Float;
	final MAX_SERVER_WAIT_TIMEOUT : Float;
	final MAX_TEXTURE_LOD_BIAS : Float;
	final MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS : Float;
	final MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS : Float;
	final MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS : Float;
	final MAX_UNIFORM_BLOCK_SIZE : Float;
	final MAX_UNIFORM_BUFFER_BINDINGS : Float;
	final MAX_VARYING_COMPONENTS : Float;
	final MAX_VERTEX_OUTPUT_COMPONENTS : Float;
	final MAX_VERTEX_UNIFORM_BLOCKS : Float;
	final MAX_VERTEX_UNIFORM_COMPONENTS : Float;
	final MIN : Float;
	final MIN_PROGRAM_TEXEL_OFFSET : Float;
	final OBJECT_TYPE : Float;
	final PACK_ROW_LENGTH : Float;
	final PACK_SKIP_PIXELS : Float;
	final PACK_SKIP_ROWS : Float;
	final PIXEL_PACK_BUFFER : Float;
	final PIXEL_PACK_BUFFER_BINDING : Float;
	final PIXEL_UNPACK_BUFFER : Float;
	final PIXEL_UNPACK_BUFFER_BINDING : Float;
	final QUERY_RESULT : Float;
	final QUERY_RESULT_AVAILABLE : Float;
	final R11F_G11F_B10F : Float;
	final R16F : Float;
	final R16I : Float;
	final R16UI : Float;
	final R32F : Float;
	final R32I : Float;
	final R32UI : Float;
	final R8 : Float;
	final R8I : Float;
	final R8UI : Float;
	final R8_SNORM : Float;
	final RASTERIZER_DISCARD : Float;
	final READ_BUFFER : Float;
	final READ_FRAMEBUFFER : Float;
	final READ_FRAMEBUFFER_BINDING : Float;
	final RED : Float;
	final RED_INTEGER : Float;
	final RENDERBUFFER_SAMPLES : Float;
	final RG : Float;
	final RG16F : Float;
	final RG16I : Float;
	final RG16UI : Float;
	final RG32F : Float;
	final RG32I : Float;
	final RG32UI : Float;
	final RG8 : Float;
	final RG8I : Float;
	final RG8UI : Float;
	final RG8_SNORM : Float;
	final RGB10_A2 : Float;
	final RGB10_A2UI : Float;
	final RGB16F : Float;
	final RGB16I : Float;
	final RGB16UI : Float;
	final RGB32F : Float;
	final RGB32I : Float;
	final RGB32UI : Float;
	final RGB8 : Float;
	final RGB8I : Float;
	final RGB8UI : Float;
	final RGB8_SNORM : Float;
	final RGB9_E5 : Float;
	final RGBA16F : Float;
	final RGBA16I : Float;
	final RGBA16UI : Float;
	final RGBA32F : Float;
	final RGBA32I : Float;
	final RGBA32UI : Float;
	final RGBA8 : Float;
	final RGBA8I : Float;
	final RGBA8UI : Float;
	final RGBA8_SNORM : Float;
	final RGBA_INTEGER : Float;
	final RGB_INTEGER : Float;
	final RG_INTEGER : Float;
	final SAMPLER_2D_ARRAY : Float;
	final SAMPLER_2D_ARRAY_SHADOW : Float;
	final SAMPLER_2D_SHADOW : Float;
	final SAMPLER_3D : Float;
	final SAMPLER_BINDING : Float;
	final SAMPLER_CUBE_SHADOW : Float;
	final SEPARATE_ATTRIBS : Float;
	final SIGNALED : Float;
	final SIGNED_NORMALIZED : Float;
	final SRGB : Float;
	final SRGB8 : Float;
	final SRGB8_ALPHA8 : Float;
	final STATIC_COPY : Float;
	final STATIC_READ : Float;
	final STENCIL : Float;
	final STREAM_COPY : Float;
	final STREAM_READ : Float;
	final SYNC_CONDITION : Float;
	final SYNC_FENCE : Float;
	final SYNC_FLAGS : Float;
	final SYNC_FLUSH_COMMANDS_BIT : Float;
	final SYNC_GPU_COMMANDS_COMPLETE : Float;
	final SYNC_STATUS : Float;
	final TEXTURE_2D_ARRAY : Float;
	final TEXTURE_3D : Float;
	final TEXTURE_BASE_LEVEL : Float;
	final TEXTURE_BINDING_2D_ARRAY : Float;
	final TEXTURE_BINDING_3D : Float;
	final TEXTURE_COMPARE_FUNC : Float;
	final TEXTURE_COMPARE_MODE : Float;
	final TEXTURE_IMMUTABLE_FORMAT : Float;
	final TEXTURE_IMMUTABLE_LEVELS : Float;
	final TEXTURE_MAX_LEVEL : Float;
	final TEXTURE_MAX_LOD : Float;
	final TEXTURE_MIN_LOD : Float;
	final TEXTURE_WRAP_R : Float;
	final TIMEOUT_EXPIRED : Float;
	final TIMEOUT_IGNORED : Float;
	final TRANSFORM_FEEDBACK : Float;
	final TRANSFORM_FEEDBACK_ACTIVE : Float;
	final TRANSFORM_FEEDBACK_BINDING : Float;
	final TRANSFORM_FEEDBACK_BUFFER : Float;
	final TRANSFORM_FEEDBACK_BUFFER_BINDING : Float;
	final TRANSFORM_FEEDBACK_BUFFER_MODE : Float;
	final TRANSFORM_FEEDBACK_BUFFER_SIZE : Float;
	final TRANSFORM_FEEDBACK_BUFFER_START : Float;
	final TRANSFORM_FEEDBACK_PAUSED : Float;
	final TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN : Float;
	final TRANSFORM_FEEDBACK_VARYINGS : Float;
	final UNIFORM_ARRAY_STRIDE : Float;
	final UNIFORM_BLOCK_ACTIVE_UNIFORMS : Float;
	final UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES : Float;
	final UNIFORM_BLOCK_BINDING : Float;
	final UNIFORM_BLOCK_DATA_SIZE : Float;
	final UNIFORM_BLOCK_INDEX : Float;
	final UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER : Float;
	final UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER : Float;
	final UNIFORM_BUFFER : Float;
	final UNIFORM_BUFFER_BINDING : Float;
	final UNIFORM_BUFFER_OFFSET_ALIGNMENT : Float;
	final UNIFORM_BUFFER_SIZE : Float;
	final UNIFORM_BUFFER_START : Float;
	final UNIFORM_IS_ROW_MAJOR : Float;
	final UNIFORM_MATRIX_STRIDE : Float;
	final UNIFORM_OFFSET : Float;
	final UNIFORM_SIZE : Float;
	final UNIFORM_TYPE : Float;
	final UNPACK_IMAGE_HEIGHT : Float;
	final UNPACK_ROW_LENGTH : Float;
	final UNPACK_SKIP_IMAGES : Float;
	final UNPACK_SKIP_PIXELS : Float;
	final UNPACK_SKIP_ROWS : Float;
	final UNSIGNALED : Float;
	final UNSIGNED_INT_10F_11F_11F_REV : Float;
	final UNSIGNED_INT_24_8 : Float;
	final UNSIGNED_INT_2_10_10_10_REV : Float;
	final UNSIGNED_INT_5_9_9_9_REV : Float;
	final UNSIGNED_INT_SAMPLER_2D : Float;
	final UNSIGNED_INT_SAMPLER_2D_ARRAY : Float;
	final UNSIGNED_INT_SAMPLER_3D : Float;
	final UNSIGNED_INT_SAMPLER_CUBE : Float;
	final UNSIGNED_INT_VEC2 : Float;
	final UNSIGNED_INT_VEC3 : Float;
	final UNSIGNED_INT_VEC4 : Float;
	final UNSIGNED_NORMALIZED : Float;
	final VERTEX_ARRAY_BINDING : Float;
	final VERTEX_ATTRIB_ARRAY_DIVISOR : Float;
	final VERTEX_ATTRIB_ARRAY_INTEGER : Float;
	final WAIT_FAILED : Float;
	@:overload(function(target:Float, srcData:Null<haxe.extern.EitherType<js.lib.IArrayBuffer, js.lib.ArrayBufferView>>, usage:Float):Void { })
	@:overload(function(target:Float, srcData:js.lib.ArrayBufferView, usage:Float, srcOffset:Float, ?length:Float):Void { })
	function bufferData(target:Float, size:Float, usage:Float):Void;
	@:overload(function(target:Float, dstByteOffset:Float, srcData:js.lib.ArrayBufferView, srcOffset:Float, ?length:Float):Void { })
	function bufferSubData(target:Float, dstByteOffset:Float, srcData:haxe.extern.EitherType<js.lib.IArrayBuffer, js.lib.ArrayBufferView>):Void;
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, border:Float, srcData:js.lib.ArrayBufferView, ?srcOffset:Float, ?srcLengthOverride:Float):Void { })
	function compressedTexImage2D(target:Float, level:Float, internalformat:Float, width:Float, height:Float, border:Float, imageSize:Float, offset:Float):Void;
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, width:Float, height:Float, format:Float, srcData:js.lib.ArrayBufferView, ?srcOffset:Float, ?srcLengthOverride:Float):Void { })
	function compressedTexSubImage2D(target:Float, level:Float, xoffset:Float, yoffset:Float, width:Float, height:Float, format:Float, imageSize:Float, offset:Float):Void;
	@:overload(function(x:Float, y:Float, width:Float, height:Float, format:Float, type:Float, offset:Float):Void { })
	@:overload(function(x:Float, y:Float, width:Float, height:Float, format:Float, type:Float, dstData:js.lib.ArrayBufferView, dstOffset:Float):Void { })
	function readPixels(x:Float, y:Float, width:Float, height:Float, format:Float, type:Float, dstData:Null<js.lib.ArrayBufferView>):Void;
	@:overload(function(target:Float, level:Float, internalformat:Float, format:Float, type:Float, source:haxe.extern.EitherType<IHTMLCanvasElement, haxe.extern.EitherType<IHTMLVideoElement, haxe.extern.EitherType<IImageData, haxe.extern.EitherType<IHTMLImageElement, haxe.extern.EitherType<IOffscreenCanvas, IImageBitmap>>>>>):Void { })
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, border:Float, format:Float, type:Float, pboOffset:Float):Void { })
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, border:Float, format:Float, type:Float, source:haxe.extern.EitherType<IHTMLCanvasElement, haxe.extern.EitherType<IHTMLVideoElement, haxe.extern.EitherType<IImageData, haxe.extern.EitherType<IHTMLImageElement, haxe.extern.EitherType<IOffscreenCanvas, IImageBitmap>>>>>):Void { })
	@:overload(function(target:Float, level:Float, internalformat:Float, width:Float, height:Float, border:Float, format:Float, type:Float, srcData:js.lib.ArrayBufferView, srcOffset:Float):Void { })
	function texImage2D(target:Float, level:Float, internalformat:Float, width:Float, height:Float, border:Float, format:Float, type:Float, pixels:Null<js.lib.ArrayBufferView>):Void;
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, format:Float, type:Float, source:haxe.extern.EitherType<IHTMLCanvasElement, haxe.extern.EitherType<IHTMLVideoElement, haxe.extern.EitherType<IImageData, haxe.extern.EitherType<IHTMLImageElement, haxe.extern.EitherType<IOffscreenCanvas, IImageBitmap>>>>>):Void { })
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, width:Float, height:Float, format:Float, type:Float, pboOffset:Float):Void { })
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, width:Float, height:Float, format:Float, type:Float, source:haxe.extern.EitherType<IHTMLCanvasElement, haxe.extern.EitherType<IHTMLVideoElement, haxe.extern.EitherType<IImageData, haxe.extern.EitherType<IHTMLImageElement, haxe.extern.EitherType<IOffscreenCanvas, IImageBitmap>>>>>):Void { })
	@:overload(function(target:Float, level:Float, xoffset:Float, yoffset:Float, width:Float, height:Float, format:Float, type:Float, srcData:js.lib.ArrayBufferView, srcOffset:Float):Void { })
	function texSubImage2D(target:Float, level:Float, xoffset:Float, yoffset:Float, width:Float, height:Float, format:Float, type:Float, pixels:Null<js.lib.ArrayBufferView>):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform1fv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform1iv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IInt32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform2fv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform2iv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IInt32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform3fv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform3iv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IInt32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform4fv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniform4iv(location:Null<IWebGLUniformLocation>, data:haxe.extern.EitherType<js.lib.IInt32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix2fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix3fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	@:overload(function(location:Null<IWebGLUniformLocation>, transpose:Bool, data:js.lib.Iterable<Float>, ?srcOffset:Float, ?srcLength:Float):Void { })
	function uniformMatrix4fv(location:Null<IWebGLUniformLocation>, transpose:Bool, data:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>, ?srcOffset:Float, ?srcLength:Float):Void;
	final canvas : haxe.extern.EitherType<IHTMLCanvasElement, IOffscreenCanvas>;
	final drawingBufferHeight : Float;
	final drawingBufferWidth : Float;
	function activeTexture(texture:Float):Void;
	function attachShader(program:IWebGLProgram, shader:IWebGLShader):Void;
	function bindAttribLocation(program:IWebGLProgram, index:Float, name:String):Void;
	function bindBuffer(target:Float, buffer:Null<IWebGLBuffer>):Void;
	function bindFramebuffer(target:Float, framebuffer:Null<IWebGLFramebuffer>):Void;
	function bindRenderbuffer(target:Float, renderbuffer:Null<IWebGLRenderbuffer>):Void;
	function bindTexture(target:Float, texture:Null<IWebGLTexture>):Void;
	function blendColor(red:Float, green:Float, blue:Float, alpha:Float):Void;
	function blendEquation(mode:Float):Void;
	function blendEquationSeparate(modeRGB:Float, modeAlpha:Float):Void;
	function blendFunc(sfactor:Float, dfactor:Float):Void;
	function blendFuncSeparate(srcRGB:Float, dstRGB:Float, srcAlpha:Float, dstAlpha:Float):Void;
	function checkFramebufferStatus(target:Float):Float;
	function clear(mask:Float):Void;
	function clearColor(red:Float, green:Float, blue:Float, alpha:Float):Void;
	function clearDepth(depth:Float):Void;
	function clearStencil(s:Float):Void;
	function colorMask(red:Bool, green:Bool, blue:Bool, alpha:Bool):Void;
	function compileShader(shader:IWebGLShader):Void;
	function copyTexImage2D(target:Float, level:Float, internalformat:Float, x:Float, y:Float, width:Float, height:Float, border:Float):Void;
	function copyTexSubImage2D(target:Float, level:Float, xoffset:Float, yoffset:Float, x:Float, y:Float, width:Float, height:Float):Void;
	function createBuffer():Null<IWebGLBuffer>;
	function createFramebuffer():Null<IWebGLFramebuffer>;
	function createProgram():Null<IWebGLProgram>;
	function createRenderbuffer():Null<IWebGLRenderbuffer>;
	function createShader(type:Float):Null<IWebGLShader>;
	function createTexture():Null<IWebGLTexture>;
	function cullFace(mode:Float):Void;
	function deleteBuffer(buffer:Null<IWebGLBuffer>):Void;
	function deleteFramebuffer(framebuffer:Null<IWebGLFramebuffer>):Void;
	function deleteProgram(program:Null<IWebGLProgram>):Void;
	function deleteRenderbuffer(renderbuffer:Null<IWebGLRenderbuffer>):Void;
	function deleteShader(shader:Null<IWebGLShader>):Void;
	function deleteTexture(texture:Null<IWebGLTexture>):Void;
	function depthFunc(func:Float):Void;
	function depthMask(flag:Bool):Void;
	function depthRange(zNear:Float, zFar:Float):Void;
	function detachShader(program:IWebGLProgram, shader:IWebGLShader):Void;
	function disable(cap:Float):Void;
	function disableVertexAttribArray(index:Float):Void;
	function drawArrays(mode:Float, first:Float, count:Float):Void;
	function drawElements(mode:Float, count:Float, type:Float, offset:Float):Void;
	function enable(cap:Float):Void;
	function enableVertexAttribArray(index:Float):Void;
	function finish():Void;
	function flush():Void;
	function framebufferRenderbuffer(target:Float, attachment:Float, renderbuffertarget:Float, renderbuffer:Null<IWebGLRenderbuffer>):Void;
	function framebufferTexture2D(target:Float, attachment:Float, textarget:Float, texture:Null<IWebGLTexture>, level:Float):Void;
	function frontFace(mode:Float):Void;
	function generateMipmap(target:Float):Void;
	function getActiveAttrib(program:IWebGLProgram, index:Float):Null<IWebGLActiveInfo>;
	function getActiveUniform(program:IWebGLProgram, index:Float):Null<IWebGLActiveInfo>;
	function getAttachedShaders(program:IWebGLProgram):Null<std.Array<IWebGLShader>>;
	function getAttribLocation(program:IWebGLProgram, name:String):Float;
	function getBufferParameter(target:Float, pname:Float):Any;
	function getContextAttributes():Null<WebGLContextAttributes>;
	function getError():Float;
	@:overload(function(extensionName:String):Null<EXT_texture_filter_anisotropic> { })
	@:overload(function(extensionName:String):Null<EXT_frag_depth> { })
	@:overload(function(extensionName:String):Null<EXT_shader_texture_lod> { })
	@:overload(function(extensionName:String):Null<EXT_sRGB> { })
	@:overload(function(extensionName:String):Null<OES_vertex_array_object> { })
	@:overload(function(extensionName:String):Null<WEBGL_color_buffer_float> { })
	@:overload(function(extensionName:String):Null<WEBGL_compressed_texture_astc> { })
	@:overload(function(extensionName:String):Null<WEBGL_compressed_texture_s3tc_srgb> { })
	@:overload(function(extensionName:String):Null<WEBGL_debug_shaders> { })
	@:overload(function(extensionName:String):Null<js.lib.WEBGL_draw_buffers> { })
	@:overload(function(extensionName:String):Null<WEBGL_lose_context> { })
	@:overload(function(extensionName:String):Null<WEBGL_depth_texture> { })
	@:overload(function(extensionName:String):Null<WEBGL_debug_renderer_info> { })
	@:overload(function(extensionName:String):Null<WEBGL_compressed_texture_s3tc> { })
	@:overload(function(extensionName:String):Null<OES_texture_half_float_linear> { })
	@:overload(function(extensionName:String):Null<OES_texture_half_float> { })
	@:overload(function(extensionName:String):Null<OES_texture_float_linear> { })
	@:overload(function(extensionName:String):Null<OES_texture_float> { })
	@:overload(function(extensionName:String):Null<OES_standard_derivatives> { })
	@:overload(function(extensionName:String):Null<OES_element_index_uint> { })
	@:overload(function(extensionName:String):Null<ANGLE_instanced_arrays> { })
	@:overload(function(extensionName:String):Any { })
	function getExtension(extensionName:String):Null<EXT_blend_minmax>;
	function getFramebufferAttachmentParameter(target:Float, attachment:Float, pname:Float):Any;
	function getParameter(pname:Float):Any;
	function getProgramInfoLog(program:IWebGLProgram):Null<String>;
	function getProgramParameter(program:IWebGLProgram, pname:Float):Any;
	function getRenderbufferParameter(target:Float, pname:Float):Any;
	function getShaderInfoLog(shader:IWebGLShader):Null<String>;
	function getShaderParameter(shader:IWebGLShader, pname:Float):Any;
	function getShaderPrecisionFormat(shadertype:Float, precisiontype:Float):Null<IWebGLShaderPrecisionFormat>;
	function getShaderSource(shader:IWebGLShader):Null<String>;
	function getSupportedExtensions():Null<std.Array<String>>;
	function getTexParameter(target:Float, pname:Float):Any;
	function getUniform(program:IWebGLProgram, location:IWebGLUniformLocation):Any;
	function getUniformLocation(program:IWebGLProgram, name:String):Null<IWebGLUniformLocation>;
	function getVertexAttrib(index:Float, pname:Float):Any;
	function getVertexAttribOffset(index:Float, pname:Float):Float;
	function hint(target:Float, mode:Float):Void;
	function isBuffer(buffer:Null<IWebGLBuffer>):Bool;
	function isContextLost():Bool;
	function isEnabled(cap:Float):Bool;
	function isFramebuffer(framebuffer:Null<IWebGLFramebuffer>):Bool;
	function isProgram(program:Null<IWebGLProgram>):Bool;
	function isRenderbuffer(renderbuffer:Null<IWebGLRenderbuffer>):Bool;
	function isShader(shader:Null<IWebGLShader>):Bool;
	function isTexture(texture:Null<IWebGLTexture>):Bool;
	function lineWidth(width:Float):Void;
	function linkProgram(program:IWebGLProgram):Void;
	function pixelStorei(pname:Float, param:haxe.extern.EitherType<Float, Bool>):Void;
	function polygonOffset(factor:Float, units:Float):Void;
	function renderbufferStorage(target:Float, internalformat:Float, width:Float, height:Float):Void;
	function sampleCoverage(value:Float, invert:Bool):Void;
	function scissor(x:Float, y:Float, width:Float, height:Float):Void;
	function shaderSource(shader:IWebGLShader, source:String):Void;
	function stencilFunc(func:Float, ref:Float, mask:Float):Void;
	function stencilFuncSeparate(face:Float, func:Float, ref:Float, mask:Float):Void;
	function stencilMask(mask:Float):Void;
	function stencilMaskSeparate(face:Float, mask:Float):Void;
	function stencilOp(fail:Float, zfail:Float, zpass:Float):Void;
	function stencilOpSeparate(face:Float, fail:Float, zfail:Float, zpass:Float):Void;
	function texParameterf(target:Float, pname:Float, param:Float):Void;
	function texParameteri(target:Float, pname:Float, param:Float):Void;
	function uniform1f(location:Null<IWebGLUniformLocation>, x:Float):Void;
	function uniform1i(location:Null<IWebGLUniformLocation>, x:Float):Void;
	function uniform2f(location:Null<IWebGLUniformLocation>, x:Float, y:Float):Void;
	function uniform2i(location:Null<IWebGLUniformLocation>, x:Float, y:Float):Void;
	function uniform3f(location:Null<IWebGLUniformLocation>, x:Float, y:Float, z:Float):Void;
	function uniform3i(location:Null<IWebGLUniformLocation>, x:Float, y:Float, z:Float):Void;
	function uniform4f(location:Null<IWebGLUniformLocation>, x:Float, y:Float, z:Float, w:Float):Void;
	function uniform4i(location:Null<IWebGLUniformLocation>, x:Float, y:Float, z:Float, w:Float):Void;
	function useProgram(program:Null<IWebGLProgram>):Void;
	function validateProgram(program:IWebGLProgram):Void;
	function vertexAttrib1f(index:Float, x:Float):Void;
	@:overload(function(index:Float, values:js.lib.Iterable<Float>):Void { })
	function vertexAttrib1fv(index:Float, values:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>):Void;
	function vertexAttrib2f(index:Float, x:Float, y:Float):Void;
	@:overload(function(index:Float, values:js.lib.Iterable<Float>):Void { })
	function vertexAttrib2fv(index:Float, values:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>):Void;
	function vertexAttrib3f(index:Float, x:Float, y:Float, z:Float):Void;
	@:overload(function(index:Float, values:js.lib.Iterable<Float>):Void { })
	function vertexAttrib3fv(index:Float, values:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>):Void;
	function vertexAttrib4f(index:Float, x:Float, y:Float, z:Float, w:Float):Void;
	@:overload(function(index:Float, values:js.lib.Iterable<Float>):Void { })
	function vertexAttrib4fv(index:Float, values:haxe.extern.EitherType<js.lib.IFloat32Array, std.Array<Float>>):Void;
	function vertexAttribPointer(index:Float, size:Float, type:Float, normalized:Bool, stride:Float, offset:Float):Void;
	function viewport(x:Float, y:Float, width:Float, height:Float):Void;
	final ACTIVE_ATTRIBUTES : Float;
	final ACTIVE_TEXTURE : Float;
	final ACTIVE_UNIFORMS : Float;
	final ALIASED_LINE_WIDTH_RANGE : Float;
	final ALIASED_POINT_SIZE_RANGE : Float;
	final ALPHA : Float;
	final ALPHA_BITS : Float;
	final ALWAYS : Float;
	final ARRAY_BUFFER : Float;
	final ARRAY_BUFFER_BINDING : Float;
	final ATTACHED_SHADERS : Float;
	final BACK : Float;
	final BLEND : Float;
	final BLEND_COLOR : Float;
	final BLEND_DST_ALPHA : Float;
	final BLEND_DST_RGB : Float;
	final BLEND_EQUATION : Float;
	final BLEND_EQUATION_ALPHA : Float;
	final BLEND_EQUATION_RGB : Float;
	final BLEND_SRC_ALPHA : Float;
	final BLEND_SRC_RGB : Float;
	final BLUE_BITS : Float;
	final BOOL : Float;
	final BOOL_VEC2 : Float;
	final BOOL_VEC3 : Float;
	final BOOL_VEC4 : Float;
	final BROWSER_DEFAULT_WEBGL : Float;
	final BUFFER_SIZE : Float;
	final BUFFER_USAGE : Float;
	final BYTE : Float;
	final CCW : Float;
	final CLAMP_TO_EDGE : Float;
	final COLOR_ATTACHMENT0 : Float;
	final COLOR_BUFFER_BIT : Float;
	final COLOR_CLEAR_VALUE : Float;
	final COLOR_WRITEMASK : Float;
	final COMPILE_STATUS : Float;
	final COMPRESSED_TEXTURE_FORMATS : Float;
	final CONSTANT_ALPHA : Float;
	final CONSTANT_COLOR : Float;
	final CONTEXT_LOST_WEBGL : Float;
	final CULL_FACE : Float;
	final CULL_FACE_MODE : Float;
	final CURRENT_PROGRAM : Float;
	final CURRENT_VERTEX_ATTRIB : Float;
	final CW : Float;
	final DECR : Float;
	final DECR_WRAP : Float;
	final DELETE_STATUS : Float;
	final DEPTH_ATTACHMENT : Float;
	final DEPTH_BITS : Float;
	final DEPTH_BUFFER_BIT : Float;
	final DEPTH_CLEAR_VALUE : Float;
	final DEPTH_COMPONENT : Float;
	final DEPTH_COMPONENT16 : Float;
	final DEPTH_FUNC : Float;
	final DEPTH_RANGE : Float;
	final DEPTH_STENCIL : Float;
	final DEPTH_STENCIL_ATTACHMENT : Float;
	final DEPTH_TEST : Float;
	final DEPTH_WRITEMASK : Float;
	final DITHER : Float;
	final DONT_CARE : Float;
	final DST_ALPHA : Float;
	final DST_COLOR : Float;
	final DYNAMIC_DRAW : Float;
	final ELEMENT_ARRAY_BUFFER : Float;
	final ELEMENT_ARRAY_BUFFER_BINDING : Float;
	final EQUAL : Float;
	final FASTEST : Float;
	final FLOAT : Float;
	final FLOAT_MAT2 : Float;
	final FLOAT_MAT3 : Float;
	final FLOAT_MAT4 : Float;
	final FLOAT_VEC2 : Float;
	final FLOAT_VEC3 : Float;
	final FLOAT_VEC4 : Float;
	final FRAGMENT_SHADER : Float;
	final FRAMEBUFFER : Float;
	final FRAMEBUFFER_ATTACHMENT_OBJECT_NAME : Float;
	final FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE : Float;
	final FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE : Float;
	final FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL : Float;
	final FRAMEBUFFER_BINDING : Float;
	final FRAMEBUFFER_COMPLETE : Float;
	final FRAMEBUFFER_INCOMPLETE_ATTACHMENT : Float;
	final FRAMEBUFFER_INCOMPLETE_DIMENSIONS : Float;
	final FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT : Float;
	final FRAMEBUFFER_UNSUPPORTED : Float;
	final FRONT : Float;
	final FRONT_AND_BACK : Float;
	final FRONT_FACE : Float;
	final FUNC_ADD : Float;
	final FUNC_REVERSE_SUBTRACT : Float;
	final FUNC_SUBTRACT : Float;
	final GENERATE_MIPMAP_HINT : Float;
	final GEQUAL : Float;
	final GREATER : Float;
	final GREEN_BITS : Float;
	final HIGH_FLOAT : Float;
	final HIGH_INT : Float;
	final IMPLEMENTATION_COLOR_READ_FORMAT : Float;
	final IMPLEMENTATION_COLOR_READ_TYPE : Float;
	final INCR : Float;
	final INCR_WRAP : Float;
	final INT : Float;
	final INT_VEC2 : Float;
	final INT_VEC3 : Float;
	final INT_VEC4 : Float;
	final INVALID_ENUM : Float;
	final INVALID_FRAMEBUFFER_OPERATION : Float;
	final INVALID_OPERATION : Float;
	final INVALID_VALUE : Float;
	final INVERT : Float;
	final KEEP : Float;
	final LEQUAL : Float;
	final LESS : Float;
	final LINEAR : Float;
	final LINEAR_MIPMAP_LINEAR : Float;
	final LINEAR_MIPMAP_NEAREST : Float;
	final LINES : Float;
	final LINE_LOOP : Float;
	final LINE_STRIP : Float;
	final LINE_WIDTH : Float;
	final LINK_STATUS : Float;
	final LOW_FLOAT : Float;
	final LOW_INT : Float;
	final LUMINANCE : Float;
	final LUMINANCE_ALPHA : Float;
	final MAX_COMBINED_TEXTURE_IMAGE_UNITS : Float;
	final MAX_CUBE_MAP_TEXTURE_SIZE : Float;
	final MAX_FRAGMENT_UNIFORM_VECTORS : Float;
	final MAX_RENDERBUFFER_SIZE : Float;
	final MAX_TEXTURE_IMAGE_UNITS : Float;
	final MAX_TEXTURE_SIZE : Float;
	final MAX_VARYING_VECTORS : Float;
	final MAX_VERTEX_ATTRIBS : Float;
	final MAX_VERTEX_TEXTURE_IMAGE_UNITS : Float;
	final MAX_VERTEX_UNIFORM_VECTORS : Float;
	final MAX_VIEWPORT_DIMS : Float;
	final MEDIUM_FLOAT : Float;
	final MEDIUM_INT : Float;
	final MIRRORED_REPEAT : Float;
	final NEAREST : Float;
	final NEAREST_MIPMAP_LINEAR : Float;
	final NEAREST_MIPMAP_NEAREST : Float;
	final NEVER : Float;
	final NICEST : Float;
	final NONE : Float;
	final NOTEQUAL : Float;
	final NO_ERROR : Float;
	final ONE : Float;
	final ONE_MINUS_CONSTANT_ALPHA : Float;
	final ONE_MINUS_CONSTANT_COLOR : Float;
	final ONE_MINUS_DST_ALPHA : Float;
	final ONE_MINUS_DST_COLOR : Float;
	final ONE_MINUS_SRC_ALPHA : Float;
	final ONE_MINUS_SRC_COLOR : Float;
	final OUT_OF_MEMORY : Float;
	final PACK_ALIGNMENT : Float;
	final POINTS : Float;
	final POLYGON_OFFSET_FACTOR : Float;
	final POLYGON_OFFSET_FILL : Float;
	final POLYGON_OFFSET_UNITS : Float;
	final RED_BITS : Float;
	final RENDERBUFFER : Float;
	final RENDERBUFFER_ALPHA_SIZE : Float;
	final RENDERBUFFER_BINDING : Float;
	final RENDERBUFFER_BLUE_SIZE : Float;
	final RENDERBUFFER_DEPTH_SIZE : Float;
	final RENDERBUFFER_GREEN_SIZE : Float;
	final RENDERBUFFER_HEIGHT : Float;
	final RENDERBUFFER_INTERNAL_FORMAT : Float;
	final RENDERBUFFER_RED_SIZE : Float;
	final RENDERBUFFER_STENCIL_SIZE : Float;
	final RENDERBUFFER_WIDTH : Float;
	final RENDERER : Float;
	final REPEAT : Float;
	final REPLACE : Float;
	final RGB : Float;
	final RGB565 : Float;
	final RGB5_A1 : Float;
	final RGBA : Float;
	final RGBA4 : Float;
	final SAMPLER_2D : Float;
	final SAMPLER_CUBE : Float;
	final SAMPLES : Float;
	final SAMPLE_ALPHA_TO_COVERAGE : Float;
	final SAMPLE_BUFFERS : Float;
	final SAMPLE_COVERAGE : Float;
	final SAMPLE_COVERAGE_INVERT : Float;
	final SAMPLE_COVERAGE_VALUE : Float;
	final SCISSOR_BOX : Float;
	final SCISSOR_TEST : Float;
	final SHADER_TYPE : Float;
	final SHADING_LANGUAGE_VERSION : Float;
	final SHORT : Float;
	final SRC_ALPHA : Float;
	final SRC_ALPHA_SATURATE : Float;
	final SRC_COLOR : Float;
	final STATIC_DRAW : Float;
	final STENCIL_ATTACHMENT : Float;
	final STENCIL_BACK_FAIL : Float;
	final STENCIL_BACK_FUNC : Float;
	final STENCIL_BACK_PASS_DEPTH_FAIL : Float;
	final STENCIL_BACK_PASS_DEPTH_PASS : Float;
	final STENCIL_BACK_REF : Float;
	final STENCIL_BACK_VALUE_MASK : Float;
	final STENCIL_BACK_WRITEMASK : Float;
	final STENCIL_BITS : Float;
	final STENCIL_BUFFER_BIT : Float;
	final STENCIL_CLEAR_VALUE : Float;
	final STENCIL_FAIL : Float;
	final STENCIL_FUNC : Float;
	final STENCIL_INDEX8 : Float;
	final STENCIL_PASS_DEPTH_FAIL : Float;
	final STENCIL_PASS_DEPTH_PASS : Float;
	final STENCIL_REF : Float;
	final STENCIL_TEST : Float;
	final STENCIL_VALUE_MASK : Float;
	final STENCIL_WRITEMASK : Float;
	final STREAM_DRAW : Float;
	final SUBPIXEL_BITS : Float;
	final TEXTURE : Float;
	final TEXTURE0 : Float;
	final TEXTURE1 : Float;
	final TEXTURE10 : Float;
	final TEXTURE11 : Float;
	final TEXTURE12 : Float;
	final TEXTURE13 : Float;
	final TEXTURE14 : Float;
	final TEXTURE15 : Float;
	final TEXTURE16 : Float;
	final TEXTURE17 : Float;
	final TEXTURE18 : Float;
	final TEXTURE19 : Float;
	final TEXTURE2 : Float;
	final TEXTURE20 : Float;
	final TEXTURE21 : Float;
	final TEXTURE22 : Float;
	final TEXTURE23 : Float;
	final TEXTURE24 : Float;
	final TEXTURE25 : Float;
	final TEXTURE26 : Float;
	final TEXTURE27 : Float;
	final TEXTURE28 : Float;
	final TEXTURE29 : Float;
	final TEXTURE3 : Float;
	final TEXTURE30 : Float;
	final TEXTURE31 : Float;
	final TEXTURE4 : Float;
	final TEXTURE5 : Float;
	final TEXTURE6 : Float;
	final TEXTURE7 : Float;
	final TEXTURE8 : Float;
	final TEXTURE9 : Float;
	final TEXTURE_2D : Float;
	final TEXTURE_BINDING_2D : Float;
	final TEXTURE_BINDING_CUBE_MAP : Float;
	final TEXTURE_CUBE_MAP : Float;
	final TEXTURE_CUBE_MAP_NEGATIVE_X : Float;
	final TEXTURE_CUBE_MAP_NEGATIVE_Y : Float;
	final TEXTURE_CUBE_MAP_NEGATIVE_Z : Float;
	final TEXTURE_CUBE_MAP_POSITIVE_X : Float;
	final TEXTURE_CUBE_MAP_POSITIVE_Y : Float;
	final TEXTURE_CUBE_MAP_POSITIVE_Z : Float;
	final TEXTURE_MAG_FILTER : Float;
	final TEXTURE_MIN_FILTER : Float;
	final TEXTURE_WRAP_S : Float;
	final TEXTURE_WRAP_T : Float;
	final TRIANGLES : Float;
	final TRIANGLE_FAN : Float;
	final TRIANGLE_STRIP : Float;
	final UNPACK_ALIGNMENT : Float;
	final UNPACK_COLORSPACE_CONVERSION_WEBGL : Float;
	final UNPACK_FLIP_Y_WEBGL : Float;
	final UNPACK_PREMULTIPLY_ALPHA_WEBGL : Float;
	final UNSIGNED_BYTE : Float;
	final UNSIGNED_INT : Float;
	final UNSIGNED_SHORT : Float;
	final UNSIGNED_SHORT_4_4_4_4 : Float;
	final UNSIGNED_SHORT_5_5_5_1 : Float;
	final UNSIGNED_SHORT_5_6_5 : Float;
	final VALIDATE_STATUS : Float;
	final VENDOR : Float;
	final VERSION : Float;
	final VERTEX_ATTRIB_ARRAY_BUFFER_BINDING : Float;
	final VERTEX_ATTRIB_ARRAY_ENABLED : Float;
	final VERTEX_ATTRIB_ARRAY_NORMALIZED : Float;
	final VERTEX_ATTRIB_ARRAY_POINTER : Float;
	final VERTEX_ATTRIB_ARRAY_SIZE : Float;
	final VERTEX_ATTRIB_ARRAY_STRIDE : Float;
	final VERTEX_ATTRIB_ARRAY_TYPE : Float;
	final VERTEX_SHADER : Float;
	final VIEWPORT : Float;
	final ZERO : Float;
};