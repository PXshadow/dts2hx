package node.crypto;
extern typedef Verify = global.nodejs.WritableStream & { @:overload(function(data:String, input_encoding:String):Verify { })
	function update(data:haxe.extern.EitherType<String, haxe.extern.EitherType<global.Buffer, haxe.extern.EitherType<js.lib.Uint8Array, haxe.extern.EitherType<js.lib.Uint8ClampedArray, haxe.extern.EitherType<js.lib.Uint16Array, haxe.extern.EitherType<js.lib.Uint32Array, haxe.extern.EitherType<js.lib.Int8Array, haxe.extern.EitherType<js.lib.Int16Array, haxe.extern.EitherType<js.lib.Int32Array, haxe.extern.EitherType<js.lib.Float32Array, haxe.extern.EitherType<js.lib.Float64Array, js.lib.DataView>>>>>>>>>>>):Verify; @:overload(function(object:haxe.extern.EitherType<String, haxe.extern.EitherType<js.lib.Object, haxe.extern.EitherType<global.Buffer, KeyObject>>>, signature:String, signature_format:String):Bool { })
	function verify(object:haxe.extern.EitherType<String, haxe.extern.EitherType<js.lib.Object, haxe.extern.EitherType<global.Buffer, KeyObject>>>, signature:haxe.extern.EitherType<global.Buffer, haxe.extern.EitherType<js.lib.Uint8Array, haxe.extern.EitherType<js.lib.Uint8ClampedArray, haxe.extern.EitherType<js.lib.Uint16Array, haxe.extern.EitherType<js.lib.Uint32Array, haxe.extern.EitherType<js.lib.Int8Array, haxe.extern.EitherType<js.lib.Int16Array, haxe.extern.EitherType<js.lib.Int32Array, haxe.extern.EitherType<js.lib.Float32Array, haxe.extern.EitherType<js.lib.Float64Array, js.lib.DataView>>>>>>>>>>):Bool; };